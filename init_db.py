import asyncio
from alembic import command
from alembic.config import Config
from alembic.script import ScriptDirectory
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi.security import OAuth2PasswordRequestForm

from src.core.db import AsyncSessionFactory
from src.features.auth.services import AuthService
from src.features.auth.dependencies import get_current_user
from src.features.users.schemas import UserCreate
from src.features.chats.services import ChatService
from src.features.chats.schemas import ChatCreate, ChatType


def run_migrations():
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏"""
    print("‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    alembic_cfg = Config("alembic.ini")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∏–≥—Ä–∞—Ü–∏—è—Ö
        script = ScriptDirectory.from_config(alembic_cfg)
        head_revision = script.get_current_head()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –ë–î
        current = command.current(alembic_cfg)
        
        if current == head_revision:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
            return
            
        print("‚öôÔ∏è  –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
        command.upgrade(alembic_cfg, "head")
        print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
        
    except Exception as e:
        if "relation" in str(e) and "already exists" in str(e):
            print("‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏")
            return
        raise e


async def create_test_data():
    print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    async with AsyncSessionFactory() as session:
        try:
            auth_service = AuthService(session)
            chat_service = ChatService(session)

            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            test_users = [
                UserCreate(
                    email="additional_user@user.com",
                    username="Additional",
                    password="testotest"
                ),
                UserCreate(
                    email="test@test.com",
                    username="Testosterone",
                    password="testotest"
                ),
                UserCreate(
                    email="just@just.com",
                    username="Justin",
                    password="testotest"
                )
            ]

            created_users = []
            for user_data in test_users:
                try:
                    user = await auth_service.register(user_data)
                    created_users.append(user)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.email}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.email}: {str(e)}")

            if len(created_users) >= 2:
                try:
                    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –ø–µ—Ä–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    form_data = OAuth2PasswordRequestForm(
                        username=test_users[1].email,
                        password=test_users[1].password,
                        scope=""
                    )
                    tokens = await auth_service.login(form_data)
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ dependency
                    current_user = await get_current_user(tokens.access_token, session)
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
                    chat_data = ChatCreate(
                        name="Test Chat",
                        chat_type=ChatType.GROUP,
                        member_ids=[created_users[0].id, created_users[2].id]
                    )
                    
                    chat = await chat_service.create_chat(
                        chat_data=chat_data,
                        current_user=current_user
                    )
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç: {chat.name}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {str(e)}")
            
            await session.commit()
        except Exception as e:
            await session.rollback()
            raise e
        finally:
            await session.close()


if __name__ == "__main__":
    try:
        run_migrations()
        asyncio.run(create_test_data())
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        raise
